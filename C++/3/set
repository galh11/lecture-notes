class Set {
private:
    int* data; // the elements of the set
    int size; // the number of elements in the set
    int maxSize; // the allocated size of the array

    int find(int number) const; // returns the index of the number in the set, or -1 if it is not found
    void expand(); // expands the allocated size of the array

    /** The initial size of the set array*/
    static const int INITIAL_SIZE = 10;

    /** The factor by which the array is expanded*/
    static const int EXPANSION_FACTOR = 2;

    /** Returned by find when the element is not found*/
    static const int NUMBER_NOT_FOUND = -1;
};

Set::Set() :
    data(new int[INITIAL_SIZE]),
    size(0),
    maxSize(INITIAL_SIZE)
{}

Set::Set(const Set& set) :
    data(new int[set.getSize()]),
    size(set.getSize()),
    maxSize(set.getSize())
{
    for (int i = 0; i < size; i++)
    {
        data[i] = set.data[i];
    }
}

Set::~Set()
{
    delete[] data;
}

