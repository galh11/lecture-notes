the use of functions such as init() is not elegant and prone to errors!

instead, a special member function called a constructor is used.
a constructor has no return value and has the name of the class

-   several constructors can be overloaded with different parameters.
-   default parameters are also allowed.

class Complex
{
    double re, im;

    public:
        Complex();
        Complex(double x, double y = 0);
};

Complex::Complex(double x, double y)
{
    re = x;
    im = y;
}

Complex c1(0.1, 0.2);
c1 = Complex(0.7, 0.5);

Complex *pc1 = new Comples(1.0, 2,0);


void print(constComplex& c)
{
    cout<< c.getReal() << "+"<< c.getImag() << "i"; 
}

Complex c1;             // Complex::Complex()
Complex c2(2.0, 1.0);   // Complex::Complex(x,y)
Complex c3(1.0);        // Complex::Complex(x,0)
Complex c4 = 3.0;       // Complex::Complex(x,0)

Complex* pc1 = newComplex;      // Complex::Complex()
Complex* pc2 = newComplex();    // Complex::Complex()

Complex* pc3 = newComplex(-3.0, 1.0);   // Complex::Complex(x,y)

print(Complex(0.0, 1.0));   // Complex::Complex(x,y)


A constructor which receives no arguments is called a default constructor
The default constructor is called when an object is created with no arguments
The compiler will automaticallygenerate a default constructor for any class that defines no constructors on its own. This compilergenerated constructor:
    - Calls the default constructors of all members that are objects
    - Does notinitialize members of built-in types (they will contain garbage)

If the class has no default constructor, a compilation errorwill occur. But how can this happen?
If the class definesanyconstructors explicitly, the compiler will not generate a default constructor for this class,
In that case, we can add a default constructor explicitly (if needed)

